{"remainingRequest":"C:\\Studium\\Angewandte_Informatik\\Master\\2te_Semester\\Seminar\\datamining_frequent_itemset\\datamining_frequent_itemset\\website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Studium\\Angewandte_Informatik\\Master\\2te_Semester\\Seminar\\datamining_frequent_itemset\\datamining_frequent_itemset\\website\\src\\components\\diagrams\\LineChart.vue?vue&type=style&index=0&id=77728f6b&scoped=true&lang=css&","dependencies":[{"path":"C:\\Studium\\Angewandte_Informatik\\Master\\2te_Semester\\Seminar\\datamining_frequent_itemset\\datamining_frequent_itemset\\website\\src\\components\\diagrams\\LineChart.vue","mtime":1587231623760},{"path":"C:\\Studium\\Angewandte_Informatik\\Master\\2te_Semester\\Seminar\\datamining_frequent_itemset\\datamining_frequent_itemset\\website\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Studium\\Angewandte_Informatik\\Master\\2te_Semester\\Seminar\\datamining_frequent_itemset\\datamining_frequent_itemset\\website\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Studium\\Angewandte_Informatik\\Master\\2te_Semester\\Seminar\\datamining_frequent_itemset\\datamining_frequent_itemset\\website\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Studium\\Angewandte_Informatik\\Master\\2te_Semester\\Seminar\\datamining_frequent_itemset\\datamining_frequent_itemset\\website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Studium\\Angewandte_Informatik\\Master\\2te_Semester\\Seminar\\datamining_frequent_itemset\\datamining_frequent_itemset\\website\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5saW5lY2hhcnR7Cn0K"},{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA;AACA","file":"LineChart.vue","sourceRoot":"src/components/diagrams","sourcesContent":["<template>\n    <div>\n        <h1>Line-Chart</h1>\n        <svg class=\"linechart\"  :id=\"id\">\n        </svg>\n    </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport { scaleLinear, scaleBand } from \"d3-scale\";\nimport { max, min } from \"d3-array\";\nimport { selectAll } from \"d3-selection\";\n\nexport default {\n    name: \"Test-Chart\",\n    props: {\n        data : Object,\n    },\n    data() {\n        return{\n            testdata: {\n                \"AM1\" : 500000,\n                \"PM\" :400000,\n                \"AM2\" : 43333,\n                \"PM2\" : 433333,\n            },\n            id: 7000,\n            height: 600,\n            svgHeight: 0,\n            svgWidth: 0,\n            width: 600,\n            margin: {top: 30, right: 30, bottom: 30, left: 70},\n            margin_top : 20,\n            margin_left: 50,\n            keys : [],\n            values: [],\n            x0: Object,\n            y: Object,\n            color: Object,\n            svg: Object,\n            container: Object,\n            xAxis: Object,\n            yAxis: Object,\n            line: Object\n        }\n    },\n    computed: {\n    },\n    mounted(){\n        this.init();\n        this.draw();\n    },\n    created(){\n        console.log(\"line chart created\")\n    },\n    methods: {\n        init(){\n            this.testdata = this.data;\n\n            this.svg = d3.select(document.getElementById(this.id));\n\n            this.widthSVG = this.width - this.margin.left - this.margin.right;\n            this.svgHeight = this.height - this.margin.top - this.margin.bottom;\n\n            this.keys = Object.keys(this.testdata);\n            this.values = Object.values(this.testdata);\n\n            this.x0 = d3.scaleBand().range([0, this.widthSVG]);\n            this.x0.domain(this.keys);\n\n            this.y = d3.scaleLinear().domain([0, d3.max(this.values)]).nice().rangeRound([this.svgHeight, 0]);\n\n            this.color = d3.scaleOrdinal(d3.schemeCategory10);\n        },\n        draw(){\n            console.log(\"Start drawing\")\n            this.svg.attr(\"viewBox\", \"0 0 \" + this.width + \" \" + this.height);\n\n            this.container = this.svg.append(\"g\")\n                                    .attr(\"class\", \"svgcontainer\")\n                                    .attr(\"id\", \"c\")\n                                    .attr(\"transform\", \"translate(\" + this.margin_left + \",\" + this.margin_top + \")\");\n\n            this.xAxis = this.container.append(\"g\")\n                                    .attr(\"class\", \"axis\")\n                                    .attr(\"id\", \"xAxis\")\n                                    .attr(\"transform\", \"translate(0,\" + this.svgHeight + \")\")\n                                    .call(d3.axisBottom(this.x0));\n\n            this.yAxis = this.container.append(\"g\")\n                                        .attr(\"id\", \"yAxis\")\n                                        .attr(\"class\", \"axis\")\n                                        .call(d3.axisLeft(this.y))\n                                        .append(\"text\")\n                                        .attr(\"x\", 2)\n                                        .attr(\"y\", this.y(this.y.ticks().pop()) + 0.5)\n                                        .attr(\"dy\", \"0.32em\")\n                                        .attr(\"fill\", \"#000\")\n                                        .attr(\"font-weight\", \"bold\")\n                                        .attr(\"text-anchor\", \"start\")\n                                        .text(\"k\");\n            \n            \n            let x0 = this.x0;\n            let y = this.y;\n            let keys = this.keys;\n            let svgHeight = this.svgHeight;\n            let color = this.color;\n            let values = this.values;\n\n            let line = d3.line()\n                        .x(function (d, i) {\n                            return x0(keys[i]) + x0.bandwidth() / 2;\n                        })\n                        .y(function (d, i) {\n                            return y(values[i]);\n                        });\n\n            this.container.append(\"path\")\n                            .datum(keys)\n                            .attr(\"stroke\", function () {\n                                return color(9);\n                            })\n                            .attr(\"class\", \"line Global\")\n                            .attr(\"d\", line)\n                            .attr(\"fill\", \"none\");\n\n            this.container.selectAll(\".dot\")\n                            .data(keys)\n                            .enter().append(\"circle\")\n                            .attr(\"class\", \"dot Global\")\n                            .attr(\"cx\", function(d) { return x0(d) + x0.bandwidth() / 2 })\n                            .attr(\"cy\", function(d,i) { return y(values[i]) })\n                            .attr(\"r\", 3)\n\n        },\n        update(){\n\n        }\n    }\n}\n</script>\n\n<style scoped>\n.linechart{\n}\n</style>"]}]}