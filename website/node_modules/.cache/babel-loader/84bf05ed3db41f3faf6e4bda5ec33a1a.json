{"remainingRequest":"C:\\Users\\robi\\Desktop\\datamining_frequent_itemset\\website\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\robi\\Desktop\\datamining_frequent_itemset\\website\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\robi\\Desktop\\datamining_frequent_itemset\\website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\robi\\Desktop\\datamining_frequent_itemset\\website\\src\\pages\\NetworkGraph.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\robi\\Desktop\\datamining_frequent_itemset\\website\\src\\pages\\NetworkGraph.vue","mtime":1587997128079},{"path":"C:\\Users\\robi\\Desktop\\datamining_frequent_itemset\\website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1587028715871},{"path":"C:\\Users\\robi\\Desktop\\datamining_frequent_itemset\\website\\node_modules\\babel-loader\\lib\\index.js","mtime":1587028715580},{"path":"C:\\Users\\robi\\Desktop\\datamining_frequent_itemset\\website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1587028715871},{"path":"C:\\Users\\robi\\Desktop\\datamining_frequent_itemset\\website\\node_modules\\vue-loader\\lib\\index.js","mtime":1587028725559}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["NetworkGraph.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <md-layout>\r\n            <div\r\n                class=\"md-layout-item md-medium-size-100 md-xsmall-size-100 md-size-100\"\r\n            >\r\n                <div id=\"graphDiv\"></div>\r\n                <md-card>\r\n                    <md-card-header data-background-color=\"gray\">\r\n                        <h4 class=\"title\">Filter</h4>\r\n                    </md-card-header>\r\n                    <md-card-content>\r\n                        <label for=\"networkminsup\">Min-Sup for Rules:</label\r\n                        ><br />\r\n                        <input\r\n                            id=\"networkminsup\"\r\n                            @change=\"update\"\r\n                            type=\"range\"\r\n                            v-model.number=\"minsup\"\r\n                            min=\"0\"\r\n                            max=\"0.3\"\r\n                            step=\"0.001\"\r\n                        />\r\n                        {{ minsup }}\r\n                        <br />\r\n                        <label for=\"networkminsup\">Kluc for Rules:</label><br />\r\n                        <input\r\n                            id=\"networkminsup\"\r\n                            @change=\"update\"\r\n                            type=\"range\"\r\n                            v-model.number=\"kluc\"\r\n                            min=\"0\"\r\n                            max=\"1\"\r\n                            step=\"0.01\"\r\n                        />\r\n                        {{ kluc }}\r\n                        <br />\r\n                        <label for=\"networkminsup\">Imb-Ratio for Rules:</label\r\n                        ><br />\r\n                        <input\r\n                            id=\"networkminsup\"\r\n                            @change=\"update\"\r\n                            type=\"range\"\r\n                            v-model.number=\"imb\"\r\n                            min=\"0\"\r\n                            max=\"1\"\r\n                            step=\"0.01\"\r\n                        />\r\n                        {{ imb }}\r\n                        <br />\r\n                        <label for=\"networkminsup\">Gravity for Rules:</label\r\n                        ><br />\r\n                        <input\r\n                            id=\"networkminsup\"\r\n                            @change=\"update\"\r\n                            type=\"range\"\r\n                            v-model.number=\"gravity\"\r\n                            min=\"-50000\"\r\n                            max=\"0\"\r\n                            step=\"1000\"\r\n                        />\r\n                        {{ gravity }}\r\n                        <br />\r\n                        <md-checkbox :change=\"update\" v-model=\"showItemsets\"\r\n                            >Show Itemsets</md-checkbox\r\n                        >\r\n                    </md-card-content>\r\n                </md-card>\r\n            </div>\r\n        </md-layout>\r\n    </div>\r\n</template>\r\n<script>\r\nimport * as d3 from \"d3\";\r\nimport { scaleLinear, scaleBand } from \"d3-scale\";\r\nimport { max, min } from \"d3-array\";\r\nimport { selectAll } from \"d3-selection\";\r\n\r\nexport default {\r\n    watch: {\r\n        showItemsets: function() {\r\n            this.update();\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            context: Object,\r\n            width: 500,\r\n            height: 500,\r\n            items: [],\r\n            frame: {\r\n                canvas: Object,\r\n                context: Object,\r\n                width: 0,\r\n                height: 0\r\n            },\r\n            simulation: Object,\r\n            graph: {\r\n                nodes: [],\r\n                links: []\r\n            },\r\n            transform: Object,\r\n            radius: 10,\r\n            minsup: 0.005,\r\n            kluc: 0.5,\r\n            imb: 0.1,\r\n            gravity: -10000,\r\n            showItemsets: false\r\n        };\r\n    },\r\n    mounted() {\r\n        this.prepareData();\r\n        this.init();\r\n    },\r\n    methods: {\r\n        update() {\r\n            d3.select(\"canvas\").remove();\r\n            this.graph.nodes = [];\r\n            this.graph.links = [];\r\n            this.prepareData();\r\n            this.init();\r\n        },\r\n        prepareData() {\r\n            let rules = require(\"../assets/json/association_rules.json\");\r\n\r\n            let filteredRules = rules.filter(item => {\r\n                return item.support > this.minsup && item.kluc > this.kluc;\r\n            });\r\n\r\n            if (!this.showItemsets) {\r\n                filteredRules.forEach(element => {\r\n                    let value = 1000.0 * parseFloat(element.support);\r\n\r\n                    this.graph.nodes.push({\r\n                        id:\r\n                            \"{\" +\r\n                            element.antecedents.join(\",\") +\r\n                            \"}->{\" +\r\n                            element.consequents.join(\",\") +\r\n                            \"}\",\r\n                        type: \"rule\",\r\n                        col: \"#FF6B66\",\r\n                        radius: this.radius + value\r\n                    });\r\n\r\n                    let inputs = element.antecedents;\r\n                    inputs.forEach(input => {\r\n                        if (\r\n                            this.graph.nodes.filter(node => node.id == input)\r\n                                .length == 0\r\n                        ) {\r\n                            this.graph.nodes.push({\r\n                                id: input,\r\n                                col: \"green\",\r\n                                radius: this.radius\r\n                            });\r\n                        }\r\n\r\n                        this.graph.links.push({\r\n                            source: input,\r\n                            target:\r\n                                \"{\" +\r\n                                element.antecedents.join(\",\") +\r\n                                \"}->{\" +\r\n                                element.consequents.join(\",\") +\r\n                                \"}\",\r\n                            col: \"blue\"\r\n                        });\r\n                    });\r\n\r\n                    let outputs = element.consequents;\r\n                    outputs.forEach(output => {\r\n                        if (\r\n                            this.graph.nodes.filter(node => node.id == output)\r\n                                .length == 0\r\n                        ) {\r\n                            this.graph.nodes.push({\r\n                                id: output,\r\n                                col: \"green\",\r\n                                val: 2,\r\n                                radius: this.radius\r\n                            });\r\n                        }\r\n\r\n                        this.graph.links.push({\r\n                            source:\r\n                                \"{\" +\r\n                                element.antecedents.join(\",\") +\r\n                                \"}->{\" +\r\n                                element.consequents.join(\",\") +\r\n                                \"}\",\r\n                            target: output,\r\n                            col: \"black\"\r\n                        });\r\n                    });\r\n                });\r\n            } else {\r\n                filteredRules.forEach(element => {\r\n                    let value = 1000.0 * parseFloat(element.support);\r\n                    this.graph.nodes.push({\r\n                        id:\r\n                            \"{\" +\r\n                            element.antecedents.join(\",\") +\r\n                            \"}->{\" +\r\n                            element.consequents.join(\",\") +\r\n                            \"}\",\r\n                        type: \"rule\",\r\n                        col: \"#FF6B66\",\r\n                        radius: value\r\n                    });\r\n\r\n                    if (\r\n                        this.graph.nodes.filter(\r\n                            node =>\r\n                                node.id ==\r\n                                \"{\" + element.antecedents.join(\",\") + \"}\"\r\n                        ).length == 0\r\n                    ) {\r\n                        let value2 = 1000.0 * parseFloat(element.as);\r\n                        this.graph.nodes.push({\r\n                            id: \"{\" + element.antecedents.join(\",\") + \"}\",\r\n                            col: \"green\",\r\n                            val: 2,\r\n                            radius: value2\r\n                        });\r\n                    }\r\n                    this.graph.links.push({\r\n                        source: \"{\" + element.antecedents.join(\",\") + \"}\",\r\n                        target:\r\n                            \"{\" +\r\n                            element.antecedents.join(\",\") +\r\n                            \"}->{\" +\r\n                            element.consequents.join(\",\") +\r\n                            \"}\",\r\n                        col: \"blue\"\r\n                    });\r\n\r\n                    if (\r\n                        this.graph.nodes.filter(\r\n                            node =>\r\n                                node.id ==\r\n                                \"{\" + element.consequents.join(\",\") + \"}\"\r\n                        ).length == 0\r\n                    ) {\r\n                        let value3 = 1000.0 * parseFloat(element.as);\r\n                        this.graph.nodes.push({\r\n                            id: \"{\" + element.consequents.join(\",\") + \"}\",\r\n                            col: \"green\",\r\n                            val: 2,\r\n                            radius: value3\r\n                        });\r\n                    }\r\n                    this.graph.links.push({\r\n                        source: \"{\" + element.consequents.join(\",\") + \"}\",\r\n                        target:\r\n                            \"{\" +\r\n                            element.antecedents.join(\",\") +\r\n                            \"}->{\" +\r\n                            element.consequents.join(\",\") +\r\n                            \"}\",\r\n                        col: \"black\"\r\n                    });\r\n                });\r\n            }\r\n        },\r\n        init() {\r\n            var height = window.innerHeight;\r\n            var graphWidth = window.innerWidth;\r\n\r\n            var graphCanvas = d3\r\n                .select(\"#graphDiv\")\r\n                .append(\"canvas\")\r\n                .attr(\"width\", graphWidth + \"px\")\r\n                .attr(\"height\", height + \"px\")\r\n                .node();\r\n\r\n            var context = graphCanvas.getContext(\"2d\");\r\n\r\n            var div = d3\r\n                .select(\"body\")\r\n                .append(\"div\")\r\n                .attr(\"class\", \"tooltip\")\r\n                .style(\"opacity\", 0);\r\n\r\n            let gravity = this.gravity;\r\n\r\n            var simulation = d3\r\n                .forceSimulation()\r\n                .force(\"center\", d3.forceCenter(graphWidth / 2, height / 2))\r\n                .force(\"x\", d3.forceX(graphWidth / 2).strength(0.1))\r\n                .force(\"y\", d3.forceY(height / 2).strength(0.1))\r\n                .force(\"charge\", d3.forceManyBody().strength(gravity))\r\n                .force(\r\n                    \"link\",\r\n                    d3\r\n                        .forceLink()\r\n                        .strength(1)\r\n                        .id(function(d) {\r\n                            return d.id;\r\n                        })\r\n                )\r\n                .alphaTarget(0)\r\n                .alphaDecay(0.05);\r\n\r\n            var transform = d3.zoomIdentity;\r\n\r\n            let data = this.graph;\r\n\r\n            initGraph(data);\r\n\r\n            function initGraph(tempData) {\r\n                function zoomed() {\r\n                    transform = d3.event.transform;\r\n                    simulationUpdate();\r\n                }\r\n\r\n                d3.select(graphCanvas)\r\n                    .call(\r\n                        d3\r\n                            .drag()\r\n                            .subject(dragsubject)\r\n                            .on(\"start\", dragstarted)\r\n                            .on(\"drag\", dragged)\r\n                            .on(\"end\", dragended)\r\n                    )\r\n                    .call(\r\n                        d3\r\n                            .zoom()\r\n                            .scaleExtent([1 / 10, 8])\r\n                            .on(\"zoom\", zoomed)\r\n                    );\r\n\r\n                function dragsubject() {\r\n                    var i,\r\n                        x = transform.invertX(d3.event.x),\r\n                        y = transform.invertY(d3.event.y),\r\n                        dx,\r\n                        dy;\r\n                    for (i = tempData.nodes.length - 1; i >= 0; --i) {\r\n                        let node = tempData.nodes[i];\r\n                        dx = x - node.x;\r\n                        dy = y - node.y;\r\n\r\n                        if (dx * dx + dy * dy < node.radius * node.radius) {\r\n                            node.x = transform.applyX(node.x);\r\n                            node.y = transform.applyY(node.y);\r\n\r\n                            return node;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function dragstarted() {\r\n                    if (!d3.event.active) simulation.alphaTarget(0.3).restart();\r\n                    d3.event.subject.fx = transform.invertX(d3.event.x);\r\n                    d3.event.subject.fy = transform.invertY(d3.event.y);\r\n                }\r\n\r\n                function dragged() {\r\n                    d3.event.subject.fx = transform.invertX(d3.event.x);\r\n                    d3.event.subject.fy = transform.invertY(d3.event.y);\r\n                }\r\n\r\n                function dragended() {\r\n                    if (!d3.event.active) simulation.alphaTarget(0);\r\n                    d3.event.subject.fx = null;\r\n                    d3.event.subject.fy = null;\r\n                }\r\n\r\n                simulation.nodes(tempData.nodes).on(\"tick\", simulationUpdate);\r\n\r\n                simulation.force(\"link\").links(tempData.links);\r\n\r\n                function render() {}\r\n\r\n                function simulationUpdate() {\r\n                    context.save();\r\n\r\n                    context.clearRect(0, 0, graphWidth, height);\r\n                    context.translate(transform.x, transform.y);\r\n                    context.scale(transform.k, transform.k);\r\n\r\n                    tempData.links.forEach(function(d) {\r\n                        context.beginPath();\r\n                        context.moveTo(d.source.x , d.source.y );\r\n                        context.lineTo(d.target.x, d.target.y);\r\n                        context.strokeStyle = d.col;\r\n                        context.stroke();\r\n                    });\r\n\r\n                    // Draw the nodes\r\n                    tempData.nodes.forEach(function(d, i) {\r\n                        context.beginPath();\r\n                        context.arc(d.x, d.y, d.radius, 0, 2 * Math.PI, true);\r\n                        context.fillStyle = d.col;\r\n                        context.fill();\r\n                        context.fillText(d.id, d.x + d.radius+2, d.y + 3);\r\n                    });\r\n\r\n                    context.restore();\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n</script>\r\n<style scoped>\r\n.edge {\r\n    stroke: white;\r\n    stroke-width: 1;\r\n}\r\n.graphSVG {\r\n    background-color: black;\r\n}\r\n\r\ndiv.container {\r\n    width: 100%;\r\n    border: 1px solid gray;\r\n}\r\ndiv.tooltip {\r\n    position: absolute;\r\n    text-align: center;\r\n    width: 180px;\r\n    padding: 2px;\r\n    font: 12px sans-serif;\r\n    background: lightsteelblue;\r\n    border: 0px;\r\n    border-radius: 8px;\r\n    pointer-events: none;\r\n}\r\ninput {\r\n    width: 50%;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/pages"}]}